Code,Zero_Shot_Prompt,Few_Shot_Prompt
"public Map<String, Integer> countWordFrequency(List<String> words) { Map<String, Integer> freqMap = new HashMap<>(); for (String word : words) { freqMap.put(word, freqMap.getOrDefault(word, 0) + 1); } return freqMap; }",Summarizethefunctionality of the following method:,"Example: Code: def add(a, b): return a + b Summary: This function returns the sum of two numbers."
"def sum_range(start, end): total = 0 for i in range(start, end): total += i return total",Identify and fix the off-by-one error in this function:,Example: Code: def count(n): return [i for i in range(n+1)] Fix: Ensure the range does not include n if unintended. Corrected Code: def count(n): return [i for i in range(n)] 
int* getArray(int size) { int arr[size]; // Warning: local array return arr; // Bug: returning pointer to local variable },Classify the type of bug in the following C++ function:,Example: Code: int arr[5]; arr[5] = 10; Bug Type: Buffer Overflow 
def is_valid_email(email): # TODO: Complete using regex pass,Complete the function using regex to validate basic email addresses:,"Example: Code: import re def extract_dates(text): pattern = r'\b\d{4}-\d{2}-\d{2}\b' return re.findall(pattern, text)"
"from flask import Flask, jsonify app = Flask(__name__) @app.route('/greet/<username>') def greet(username): # TODO: Return a JSON greeting pass",)Create a'/greet/<username>'endpoint that returns a JSON greeting:,"Example: Code: from flask import Flask app = Flask(__name__) @app.route('/hello/<name>') def greet(name): return f'Hello, {name}"
"--TODO: Design schema with appropriate keys and constraints--Tables: users(id, name), books(id, title), reviews(id, user_id, book_id, rating)","Write the schema for a review app with users, books, and reviews:","""Example Code for to do list schema: -- Users table CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, email VARCHAR(100) NOT NULL UNIQUE); -- Tasks table CREATE TABLE tasks (id INT PRIMARY KEY, user_id INT NOT NULL,title VARCHAR(255) NOT NULL, description TEXT, due_date DATE, completed BOOLEAN DEFAULT FALSE,FOREIGN KEY (user_id) REFERENCES users(id));"""
public int getLength(String s) { return s.length(); // What if s is null? },Identify any null dereference risk:,"Example Code: def get_length(user): return len(user['name']) Risk: If 'user' is None, this will raise an error."
"def parse_csv_line(line): return line.split(',') # Incomplete: doesn't handle quoted fields",Improve the parser to support quoted fields:,"Example: Code: def parse_line(line): return line.strip().split(',') Corrected Code:import csvfrom io import StringIO def parse_line(line): reader = csv.reader(StringIO(line), skipinitialspace=True) return next(reader)"
"data class Product(val id: Int, val name: String, val price: Double) // TODO: Create GET and POST endpoints using Ktor",Convert the data class to a REST API using Ktor:,"Example: Code: data class User(val id: Int, val name: String, val email: String) Corrected Code: @Serializable data class User(val id: Int, val name: String, val email: String) val users = mutableListOf(User(1, 'Alice', 'alice@example.com'), User(2, 'Bob', 'bob@example.com')) fun main() {embeddedServer(Netty, port = 8080) {routing {get('/users') {call.respond(users)}get('/users/{id}') {val id = call.parameters['id']?.toIntOrNull() val user = users.find { it.id == id } if (user != null) call.respond(user) else call.respond(HttpStatusCode.NotFound, 'User not found') post('/users') {val newUser = call.receive<User>() users.add(newUser) call.respond(HttpStatusCode.Created, newUser)}.start(wait = true)}"
def reverse_words(sentence): return ' '.join(sentence.split()[::-1]),Write a brief summary of the function:,Example Code: def square(n): return n * n Explanation: This function returns the square of a number.
"# This function checks if a number is prime def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5)+1): if n % i == 0: return False return True",Write a prompt that could generate the code.,Example Code: def square(n): return n * n Prompt: Create a python function that returns the square of a number.
"def factorial(n): result = 1 for i in range(1, n): result *= i return result",Fix the bug when input is 0:,"Example: def divide(a, b): return a / b Corrected Code:def divide(a, b): if b == 0: raise ValueError('Denominator cannot be zero.') return a / b"
"struct Node { int data; struct Node* next; }; void deleteNode(struct Node** head, int key) { // TODO: Implement node deletion }",Implement node deletion by value:,Example: Task: Explain what this function does. Code: def square(n): return n * n Explanation: This function returns the square of a number.
def fibonacci(n): # TODO: Base cases and recursive call pass,Complete the recursive function for Fibonacci:,Example Code: def square(n): #TODO: Complete the function to return the square of a number Corrected Code: def square(n): return n * n
"class Person: def __init__(self): # TODO: Add name, age, and optional email pass",Complete the class constructor:,Example Code: def __init__(Account) #TODO: Add name balance and email Corrected Code: def __init__(Account) self.name = name self.balance = balance self.email = email
"public int binarySearch(int[] arr, int target) { int left = 0, right = arr.length- 1; while (left <= right) { int mid = (left + right) / 2; // TODO: Compare and adjust bounds } return-1; }",Complete the binary search implementation:,Example Code: def square(n): #TODO: Complete the function to return the square of a number Corrected Code: def square(n): return n * n
// Supposed to return true if x is even bool isOdd(int x) { return x % 2 == 0; // Logic contradicts function name },Resolve inconsistency between function name and logic:,"Example Code: int sum(int a, int b) { return a * b; } Corrected Code: int product(int a, int b) { return a * b; }"
"function isEven(n) { return n % 2; // Returns 1 or 0, not true/false }",Identify and fix the bug:,Example code: isDivisibleBy3(int n) { return n % 3; } Corrected Code: isDivisibleBy3(int n) { return n % 3 == 0; }
"// Function that validates an input, calculates square, and returns result int process(int x) { if (x < 0) return-1; return x * x; }",Decompose the high-level comment/summary into logical steps:,"Example: This code takes in two numbers and returns their sum. Code: def add(a, b): return a + b Explanation: The function takes two parameters, a and b, and returns their sum."
def calculate_average(scores): total = 0 # TODO: Complete to return average pass,Complete the function based on intent,Example Code: def sum_of_evens(n): #TODO: Complete to return sum of even numbers Corrected Code: return sum(i for i in range(n) if i % 2 == 0)
"# utils.py-Script to parse and summarize numeric CSV files import csv def read_csv(filepath): with open(filepath, r) as f: return [row for row in csv.reader(f)] def summarize_column(data, index): values = [float(row[index]) for row in data[1:]] # skip header total = sum(values) avg = total / len(values) return total, avg def main(): filepath = 'data.csv' data = read_csv(filepath) total, avg = summarize_column(data, 1) print(""Total:"", total) print(""Average:"", avg) if __name__ == __main__: main()","Analyze the following utility script. Identify any potential logic issues or design flaws. Then, refactor it for better readability, correctness, and safety","Example Code: def divide(a, b): return a / b def main(): x = int(input('Enter numerator: ')) y = int(input('Enter denominator: ')) print('Result:', divide(x, y)) main() Explanation: Logic issue: No error handling for division by zero or invalid input. Design flaw: All logic is in main(); better separation of concerns is recommended. Safety issue: Direct use of input() without validation can crash the program. Corrected Code:def safe_divide(a, b): if b == 0: return 'Error: Division by zero.' return a / b def get_int(prompt): while True: try: return int(input(prompt)) except ValueError: print('Please enter a valid integer.') def main(): x = get_int('Enter numerator: ') y = get_int('Enter denominator: ') print('Result:', safe_divide(x, y)) if __name__ == '__main__': main()"
